<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.pikpak.repo.InoutBoundRepo">

<!-- 출고 위치 선택을 위해 재고정보 끌고오기  -->
<select id="select_stock" resultType="kr.co.pikpak.dto.outgoing_select_view_dto">
select * from outgoing_select_view where product_cd=#{product_cd}
</select>


<!-- 입고와 동시에 warehouse_locations 업데이트 -->
<update id="update_warehouse_locations">
update warehouse_locations set current_capacity=current_capacity+1 where location_cd=#{location_cd}
</update>

<!-- 입고와 동시에 warehouse update -->
<update id="update_wwarehouse" parameterType="Map">
update warehouse set product_qty = product_qty + #{additional_qty}, update_by=#{update_by} where wh_warehouse_idx=#{wh_warehouse_idx}
</update>

<!-- 입고와 동시에 warehouse insert -->
<insert id="insert_warehouse" parameterType="Map">
insert into warehouse values ('0',#{location_cd},#{product_cd},#{product_nm},#{supplier_nm},#{product_qty},#{intransit_qty},#{inventory_log},#{update_dt},#{update_by},#{supplier_cd})
</insert>

<!-- warehouse에 데이터가 있는 지 없는 지 확인 -->
<select id="check_warehouse" resultType="String">
select wh_warehouse_idx from warehouse where location_cd=#{location_cd} and product_cd=#{product_cd}
</select>

<!-- receiving 테이블 입고 등록 -->
<insert id="insert_receiving">
insert into receiving values ('0', #{deliver_cd}, #{exreceiving_cd}, #{receiving_cd}, #{lot_no},#{supplier_cd},
#{product_cd},#{product_nm},#{receiving_qty},#{receiving_size},#{location_cd},#{operator_id},#{inventory_dt},now(),#{receiving_log})
</insert>

<!-- 입고 모달 위치 코드 정보 -->
<select id="select_locations" resultType="kr.co.pikpak.dto.warehouse_locations_dto_lhwtemp">
select * from warehouse_locations where supplier_cd=#{supplier_cd}
</select>

<!-- 주문현황 보여주기 -->
<select id="select_order_enroll" resultType="kr.co.pikpak.dto.order_enroll_dto_lhwtemp">
select * from order_enroll where process_st='승인' order by order_idx desc
</select>

<!-- 반송 등록할 때 가입고 테이블 반송수량 업데이트 -->
<update id="update_exrecv_return">
update ex_receiving set return_qty=#{return_qty} where exreceiving_cd=#{exreceiving_cd}
</update>


<!--가입고 반송 등록 -->
<insert id="insert_deliver_return">
insert into deliver_return values ('0',#{deliver_cd},#{exreceiving_cd},#{d_return_cd}, #{d_return_qty}, #{d_return_type},#{d_return_dt},
now(),#{operator_id})
</insert>

<!-- 가입고 테이블 select -->
<select id="select_ex_receiving" resultType="kr.co.pikpak.dto.ex_receiving_joined_dto">
select a.exreceiving_idx, a.deliver_cd, a.exreceiving_cd, b.supplier_cd, b.supplier_nm, a.product_cd, c.product_nm, a.exreceiving_qty,
a.return_qty, a.exreceiving_size, a.exreceiving_area, a.departure_dt, a.exreceiving_st, a.update_id, a.make_dt
from ex_receiving as a join supplier_info as b join product as c where a.supplier_cd=b.supplier_cd
and a.product_cd=c.product_cd order by a.exreceiving_idx desc
</select>


<!-- 입고요청의 상품명 모달 : 상품 리스트 페이징 + 검색 -->
<select id="select_product_limit" resultType="kr.co.pikpak.dto.product_dto_lhwtemp"  parameterType="Map">
select * from product where product_cd like concat ('%',#{pd_cd},'%') and
product_nm like concat ('%',#{pd_nm},'%') order by product_idx desc limit #{startpg},#{page_size}
</select>

<!-- 입고요청의 상품명 모달 : 상품 리스트 개수 가져오기(검색 포함) -->
<select id="select_product_total" resultType="Integer">
select count(*) as total from product where product_cd like concat ('%',#{pd_cd},'%') and
product_nm like concat ('%',#{pd_nm},'%')
</select>


<!-- 입고요청의 회사명 모달 : 회사 리스트 페이징 + 검색 -->
<select id="select_supplier_limit" resultType="kr.co.pikpak.dto.supplier_info_dto_lhwtemp"  parameterType="Map">
select * from supplier_info where supplier_cd like concat ('%',#{comp_cd},'%') and
supplier_nm like concat ('%',#{comp_nm},'%') order by supplier_idx desc limit #{startpg},#{page_size}
</select>


<!-- 입고요청의 회사명 모달 : 회사정보 개수 가져오기(검색 포함)-->
<select id="select_supplier_total" resultType="Integer">
select count(*) as total from supplier_info where supplier_cd like concat ('%',#{comp_cd},'%') and
supplier_nm like concat ('%',#{comp_nm},'%')
</select>

<!-- operator_id로 operator_nm 검색 (모든 리스트 출력용) -->
<select id="search_one_id" resultType="String">
select operator_nm from login_operator where operator_id=#{operator_id};
</select>

<!-- operator_nm으로 operaotr_id 검색(조회용) -->
<select id="search_operator_nm" resultType="String">
select operator_id, operator_nm from login_operator where operator_nm=#{operator_nm};
</select>

<!-- 입고요청 리스트 조회 -->
<select id="select_inreq_search" resultType="kr.co.pikpak.dto.input_request_dto" parameterType="Map">
   SELECT
    a.*,
    b.operator_nm AS operator_nm,
    c.operator_nm AS update_nm
  FROM
    input_request a
    LEFT JOIN login_operator b ON a.operator_id = b.operator_id
    LEFT JOIN login_operator c ON a.update_id = c.operator_id
  WHERE 1=1
  <if test="supplier_cd != null and supplier_cd != ''">
    AND a.supplier_cd = #{supplier_cd}
  </if>
  <if test="product_cd != null and product_cd != ''">
    AND a.product_cd = #{product_cd}
  </if>
  <if test="request_st != null and request_st != ''">
    AND a.request_st = #{request_st}
  </if>
  <if test="operator_id_list != null and operator_id_list.size() > 0">
    AND a.operator_id IN 
    <foreach item="id" collection="operator_id_list" open="(" separator="," close=")">
      #{id}
    </foreach>
  </if>
  <if test="start_date != null and start_date != '' and end_date != null and end_date != ''">
    AND a.request_dt BETWEEN #{start_date} AND #{end_date}
  </if>
  ORDER BY a.request_idx DESC
</select>

<!-- 입고요청 수정하기 -->
<update id="update_inreq" parameterType="Map">
update input_request set product_qty=#{product_qty}, add_req=#{add_req}, hope_dt=#{hope_dt}, update_id=#{update_id} where request_idx=#{request_idx}
</update>

<!-- 입고요청 삭제하기 -->
<delete id="delete_inreq">
delete from input_request where FIND_IN_SET(request_idx,#{request_idx})
</delete>

<!-- 입고요청 리스트 불러오기 -->
<select id="select_inreq" resultType="kr.co.pikpak.dto.input_request_dto">
SELECT 
    a.*,
    b.operator_nm AS operator_nm,
    c.operator_nm AS update_nm
FROM 
    input_request AS a
JOIN 
    login_operator AS b ON a.operator_id = b.operator_id
LEFT JOIN 
    login_operator AS c ON a.update_id = c.operator_id
ORDER BY 
    a.request_idx DESC
</select>

<!-- 입고요청의 등록모달 : 상품정보 가져오기(join사용) -->
<select id="select_product" resultType="Map">
select a.supplier_cd, b.supplier_nm, a.product_cd, a.product_nm 
from product as a join supplier_info as b where a.supplier_cd=b.supplier_cd
</select>

<!-- 입고요청 등록하기 -->
<insert id="input_req_insert">
insert into input_request values ('0',#{request_cd},#{supplier_cd},#{supplier_nm},#{product_cd},#{product_nm},
#{product_qty},#{operator_id},#{request_st},#{add_req},#{hope_dt},now(),#{update_dt},#{update_id})
</insert>

<!-- 데이터베이스 서버시간 가져오기 -->
<select id="get_time" resultType="String">
select date_format(now(), '%Y%m%d%H%i%s') as server_time
</select>
</mapper>